# -*- coding: utf-8 -*-
"""Pandas: selecionando e agrupando dados - EXERCICIO 3 - 1

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/150g5fzDPGeu-fZbY7uwBlrTrRJz4koZo

# Desafio: hora da prática

Uma das tarefas passadas pela equipe de supervisão do órgão ambiental era de encontrar a emissão média de cada gás por ano. Conseguimos realizar essa tarefa usando o método groupby() e pivot_table() para gerar uma tabela contendo a emissão ao longo dos anos para cada um dos gases.

A equipe de supervisão deseja saber agora a média de emissão para cada um dos setores econômicos da coluna "Nível 1 - Setor" ao longo dos anos. Como desafio, crie uma tabela de pivô e uma visualização gráfica contendo essas informações, utilizando apenas o método pivot_table para a construção da tabela, sem utilizar o método groupby.

Você pode buscar informações de como fazer isso na [documentação Pandas sobre o método pivot_table.
](https://pandas.pydata.org/docs/reference/api/pandas.pivot_table.html)
"""

!pip install pandas
!pip install matplotlib
!pip install openpyxl

import pandas as pd
import matplotlib.pyplot as plt

from google.colab import drive
drive.mount('/content/drive')

dados = '/content/drive/MyDrive/Planilhas de estudo ALURA/SEEG10-BR_2022.10.27-FINAL.xlsx'

emissoes_gases = pd.read_excel(dados, sheet_name = 'GEE Estados')
emissoes_gases.head()

"""# Pronto, os dados foram devidamente carregados. Agora vamos começar o exercicio!

# Primeiro vamos modificar a tabela pois precisamos que seja possivel ver as emissoes por ano:
"""

# Essa linha de código retorna os nomes das colunas do DataFrame emissoes_gases que estão entre 'Nível 1 - Setor' e 'Produto'.
emissoes_gases.loc[:,'Nível 1 - Setor':'Produto'].columns

# Retorna uma lista com o nome das colunas listadas que vão de  'Nível 1 - Setor' até 'Produto'.
emissoes_gases.loc[:,'Nível 1 - Setor':'Produto'].columns
colunas_info = list(emissoes_gases.loc[:,'Nível 1 - Setor':'Produto'].columns)
colunas_info

# Retonara um array com os anos de cada uma das colunas.
emissoes_gases.loc[:,1970:2021].columns

# Retorna uma lista com os anos.
colunas_emissao = list(emissoes_gases.loc[:,1970:2021].columns)
colunas_emissao

# Para realizar a transformação do DataFrame, utilizamos o método melt(). Esse método tem o intuito de transformar um DataFrame de um
# formato amplo (wide) para o formato longo (long).

emissoes_gases.melt(id_vars = colunas_info, value_vars = colunas_emissao, var_name = 'Ano', value_name = 'Emissao')

# Salvando a nova tabela em uma variável para usarmos daqui para frente nas analises :) :

emissoes_por_ano = emissoes_gases.melt(id_vars = colunas_info, value_vars = colunas_emissao, var_name = 'Ano', value_name = 'Emissao')
emissoes_por_ano
# print(emissoes_por_ano)

"""# E agora sim (aleluia ahaha), temos o 'Ano' e a 'Emissão' e os tipos de gases separados por colunas e estamos prontos para responder a ativida. Sigamos o exercicio.."""

# Visualizando a tabela de emissoes por ano:
emissoes_por_ano

# Recapitulando a questão:

# A equipe de supervisão deseja saber agora a média de emissão para cada um dos setores econômicos da coluna "Nível 1 - Setor" ao longo dos anos.
# Como desafio, crie uma tabela de pivô e uma visualização gráfica contendo essas informações, utilizando apenas o método pivot_table para a construção da tabela,
# sem utilizar o método groupby.

# Resolvendo a questão:
emissao_setor = emissoes_por_ano.pivot_table(index = 'Ano', columns = 'Nível 1 - Setor', values = 'Emissao', aggfunc = 'mean')
emissao_setor

# Plotando o Gráfico e finalizando a atividade!
emissao_setor.plot(subplots=True, figsize=(15, 10))

# Ajustando o layout e adicionando o título geral
plt.tight_layout(pad=3.0)
plt.suptitle('Emissao de Gases por Setor', fontsize=16)
plt.subplots_adjust(top=0.93)  # Ajusta a posição do suptitle

# Mostrando o gráfico
plt.show()