# -*- coding: utf-8 -*-
"""Pandas I/O: trabalhando com diferentes formatos de arquivos - (EXERCICIO 5)

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mkT6NVJmxsh-qXEYEtbe-jKLtmBmEvWZ

# Desafio: manipulando um banco de dados

Chegou a hora de testar os conhecimentos desenvolvidos durante a aula.

Você é responsável por criar um banco de dados local de clientes para uma instituição financeira. Temos o [arquivo CSV](https://raw.githubusercontent.com/alura-cursos/Pandas/main/clientes_banco.csv) com os dados de clientes.

Sua missão é:


1.   Criar o banco de dados local com a biblioteca SQLAlchemy.
2.   Escrever os dados do arquivo CSV neste banco de dados local.
3.   Realizar três atualizações no banco de dados:

* Atualizar o registro do cliente de ID 6840104 que teve o rendimento anual alterado para 300000.

* Excluir o registro do cliente de ID 5008809, pois essa pessoa não possui mais conta na instituição financeira.

* Criar um novo registro de cliente seguindo as especificações abaixo:
        ID_Cliente: 6850985
        Idade: 33
        Grau_escolaridade: Doutorado
        Estado_civil: Solteiro
        Tamanho_familia: 1
        Categoria_de_renda: Empregado
        Ocupacao: TI
        Anos_empregado: 2
        Rendimento_anual: 290000
        Tem_carro: 0
        Moradia: Casa/apartamento próprio



Dica importante: Para adicionar um(a) novo(a) cliente à tabela, utilize a cláusula **INSERT INTO** seguida do nome da tabela e depois especifique entre parênteses os nomes das colunas da tabela. Utilize a cláusula **VALUES** e, em seguida, passe entre parênteses os novos valores para esse novo registro. Certifique-se de que os valores estejam na ordem correta e no formato adequado para cada coluna.
"""

# Importando a biblioteca Pandas
import pandas as pd

# Importando o banco de dados SQL Alchemy
import sqlalchemy

# Verificando a versão dele para ver se precisa atualizar:
sqlalchemy.__version__

# Visto que ele tava desatualizado, chamei a atualização para o banco de dados e
# pedi que instalasse a versão <2.0:
!pip install --upgrade sqlalchemy==2.0

# Após preparar e atualizar, vou importar o bd para poder usa-lo e
# especificar que quero ler os metadados das tabelas e inspeciona-los:
from sqlalchemy import create_engine, MetaData, table, inspect

# Aqui espelicamos para IDE que nós queremo atribuir a váriavel "engine" a seguinte funcionaldade:
engine = create_engine('sqlite:///:memory:')

# create_engine('sqlite:///:memory:'): Aqui estamos dizendo que engine vai receber o motor de criação do banco de dados, e vai executar
# da seguinte forma, que é localmente. Logo esse código serve para dizer que esse banco de dados vai ser executado com o moto local
# usando essa maquina aqui como armazenamento para o dados que serão trabalhados.

"""Após ter feito as preparações, apartir daqui vou começar a resolução da atividade :D"""

import pandas as pd

url = 'https://raw.githubusercontent.com/alura-cursos/Pandas/main/clientes_banco.csv'

bancoDados = pd.read_csv(url)

bancoDados.head()

# Enviando para o banco de dados os dados em CSV:
bancoDados.to_sql('clientes', engine, if_exists='replace', index=False)

# INSPECTOR é usado no SQLAlchemy para inspecionar metadados de um banco de dados.
# Ele permite listar tabelas, colunas, chaves primárias, estrangeiras e índices, sendo útil para explorar e
#automatizar tarefas relacionadas à estrutura do banco.

# Então vamos usar o INSPECT para listar a tabela que enviamos para o banco para podermos ler mais a frente.

inspector = inspect(engine)

# Usamos esse print para chamar todas as tabelas do banco de dados para ver se a transferencia
# de CSV para SQL para dentro do banco foi feita com sucesso. Assim podemos vizualisar a tabela.
print(inspector.get_table_names())

"""."""

query = 'SELECT * FROM clientes' # Chamamos um select total da tabela dentro do banco para checarmos se os dados vieram.

pd.read_sql(query, engine) # Usamos o pd.read_sql para renderizar a query e o engine que é o motor:

"""Agora vamos para a etapa final que é realizar as QUERY's que o exercicio pede que são essas:

# Atualizar o registro do cliente de ID 6840104 que teve o rendimento anual alterado para 300000.
"""

from sqlalchemy import text # Import the 'text' function from sqlalchemy

query = 'UPDATE clientes SET Rendimento_anual="300000" WHERE ID_Cliente=6840104'
with engine.connect() as conn:
    conn.execute(text(query))
    conn.commit()

# Verificando se atualizou
query = 'SELECT * FROM clientes WHERE ID_Cliente=6840104 '
pd.read_sql(query, engine)

"""# Excluir o registro do cliente de ID 5008809, pois essa pessoa não possui mais conta na instituição financeira.


"""

query = 'DELETE FROM clientes WHERE ID_Cliente=5008809'
with engine.connect() as conn:
    conn.execute(text(query))
    conn.commit()

# Verificando se atualizou
query = 'SELECT * FROM clientes WHERE ID_Cliente=5008809'
pd.read_sql(query, engine)

"""# Criar um novo registro de cliente seguindo as especificações abaixo:

  * ID_Cliente: 6850985
  * Idade: 33
  * Grau_escolaridade: Doutorado
  * Estado_civil: Solteiro
  * Tamanho_familia: 1
  * Categoria_de_renda: Empregado
  * Ocupacao: TI
  * Anos_empregado: 2
  * Rendimento_anual: 290000
  * Tem_carro: 0
  * Moradia: Casa/apartamento próprio
"""

query = 'INSERT INTO clientes (ID_Cliente,Idade,Grau_escolaridade,Estado_civil, Tamanho_familia, Categoria_de_renda, Ocupacao, Anos_empregado, Rendimento_anual,Tem_carro, Moradia) Values (6850985,33,"Doutorado","Solteiro",1,"Empregado","TI",2,290000,0,"Casa/apartamento próprio")'
with engine.connect() as conn:
    conn.execute(text(query))
    conn.commit()

query = 'SELECT * FROM clientes WHERE ID_Cliente=6850985'
pd.read_sql(query, engine)