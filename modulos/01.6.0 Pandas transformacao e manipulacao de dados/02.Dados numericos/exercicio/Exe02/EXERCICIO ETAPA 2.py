# -*- coding: utf-8 -*-
"""Pandas: transformação e manipulação de dados - EXERCICIO

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1u6dGpIUZVw5vmKmK1bKdhsxP2BIp9V9Q

# **Desafio: trabalhando em outros contextos**
Chegou a hora de pôr em prática tudo o que aprendemos durante as aulas. Preparei dois projetos extras para desenvolvermos durante o curso, para garantir que possamos praticar bastante! Para isso, vamos trabalhar com 2 novos conjuntos de dados, mas que dessa vez serão bem menores. As bases de dados estão disponíveis para download abaixo:

* Projeto desafio 1: [vendas online - dados_vendas_clientes.json](https://cdn3.gnarususercontent.com.br/2928-transformacao-manipulacao-dados/dados_vendas_clientes.json);
* Projeto desafio 2: administração de condomínios - [dados_locacao_imoveis.json](https://cdn3.gnarususercontent.com.br/2928-transformacao-manipulacao-dados/dados_locacao_imoveis.json).

Em cada aula, desenvolveremos uma etapa dos projetos. Portanto, salve seu código de construção em cada desafio para que possa aplicá-lo nos desafios posteriores.

## **Etapa 1**
* **Projeto desafio 1: vendas online**

O objetivo desse projeto é realizar uma análise dos resultados de um evento com os clientes de uma empresa de vendas online. Foi coletado um conjunto de dados que contém os clientes que mais gastaram com produtos dentro de 5 dias de vendas, que é o período de duração do evento. Essa análise vai identificar o cliente com a maior compra na semana, que irá receber um prêmio da loja, e posteriormente, ela pode ajudar a empresa a criar novas estratégias para atrair mais clientes.

A base de dados utilizada nessa análise é a ***dados_vendas_clientes.json*** e contém informações importantes sobre os clientes como, o nome de cadastro do cliente, o valor total pago na compra e o dia da compra.

Sabendo essas informações, o desafio do projeto 1: vendas online será abrir a base de dados com Pandas e aplicar o ***json_normalize***.

Projeto desafio 2: administração de condomínios
A administração de condomínios é uma tarefa que requer muita atenção e organização. Entre as diversas responsabilidades da gestão está o recebimento dos aluguéis dos locatários. Para garantir uma boa saúde financeira do empreendimento, é fundamental que esses pagamentos sejam feitos de forma regular e pontual. No entanto, sabemos que nem sempre isso acontece.

Pensando nisso, proponho um desafio de tratamento de dados com o objetivo de analisar o atraso no pagamento de aluguéis no condomínio de alguns moradores. Disponibilizo a base de dados ***dados_locacao_imoveis.json***, que contém informações sobre o apartamento dos locatários, o dia acordado para o pagamento do aluguel, o dia da efetivação do pagamento de aluguel e o valor do aluguel.

Com essas informações, o desafio do projeto 2: administração de condomínios será similar ao desafio do projeto 1, abrir a base de dados com Pandas e aplicar o ***json_normalize*** no DataFrame.
"""

!pip install pandas

import pandas as pd

from google.colab import drive
drive.mount('/content/drive')

dados_clientes = pd.read_json('/content/drive/MyDrive/Planilhas de estudo ALURA/dados_vendas_clientes.json')
dados_clientes.head()

dados_clientes = pd.json_normalize(dados_clientes['dados_vendas'])
dados_clientes.head()

"""* **Projeto desafio 2: administração de condomínios**

A administração de condomínios é uma tarefa que requer muita atenção e organização. Entre as diversas responsabilidades da gestão está o recebimento dos aluguéis dos locatários. Para garantir uma boa saúde financeira do empreendimento, é fundamental que esses pagamentos sejam feitos de forma regular e pontual. No entanto, sabemos que nem sempre isso acontece.

Pensando nisso, proponho um desafio de tratamento de dados com o objetivo de analisar o atraso no pagamento de aluguéis no condomínio de alguns moradores. Disponibilizo a base de dados ***dados_locacao_imoveis.json***, que contém informações sobre o apartamento dos locatários, o dia acordado para o pagamento do aluguel, o dia da efetivação do pagamento de aluguel e o valor do aluguel.

Com essas informações, o desafio do projeto 2: administração de condomínios será similar ao desafio do projeto 1, abrir a base de dados com Pandas e aplicar o ***json_normalize*** no DataFrame.
"""

dados_imoveis = pd.read_json('/content/drive/MyDrive/Planilhas de estudo ALURA/dados_locacao_imoveis.json')
dados_imoveis.head()

dados_imoveis = pd.json_normalize(dados_imoveis['dados_locacao'])
dados_imoveis.head()

"""## **Etapa 2**

**Projeto desafio 1: vendas online**

Lemos a base de dados no desafio anterior, agora podemos avançar nas transformações desses dados. Então, o novo desafio do projeto 1 será dividido em algumas metas:

* Remover os dados em listas dentro do DataFrame;
* Verificar os tipos de dados;
* Identificar colunas numéricas;
* Transformar a coluna numérica para o tipo numérico.

<br>

### ** Projeto desafio 2: administração de condomínios ** <br>
Lemos a base de dados no desafio anterior, agora podemos avançar nas transformações desses dados. Então, da mesma forma que o projeto 1, o desafio do projeto 2 está listado em algumas metas:

* Remover os dados em listas dentro do DataFrame;
* Verificar os tipos de dados;
* Identificar colunas numéricas;
* Transformar a coluna numérica para o tipo numérico.

## Remover os dados em listas dentro do DataFrame
"""

# Remover os dados em listas dentro do DataFrame
colunas = list(dados_clientes.columns)
colunas

dados_clientes.head()

dados_clientes = dados_clientes.explode(colunas[1:])
dados_clientes.head()

dados_clientes.reset_index(drop=True,inplace=True)

"""## Verificar os tipos de dados"""

# Verificar os tipos de dados
dados_clientes.info()

"""## Identificar colunas numéricas"""

# Identificar colunas numéricas
dados_clientes.head()

"""## Transformar a coluna numérica para o tipo numérico"""

# Transformar a coluna numérica para o tipo numérico
!pip install numpy

import numpy as np

## Removendo os caracteres especiais para ficar só o valor númerico ainda string para poder converter.
dados_clientes['Valor da compra'].apply(lambda x: x.replace('R$', '').replace(',', '').strip())

## Substituindo a coluna antiga pela nova já com o filtro dos caracteres especiais feitos:
dados_clientes['Valor da compra'] = dados_clientes['Valor da compra'].apply(lambda x: x.replace('R$', '').replace(',', '').strip())

## AGORA SIM, convertendo o valor númerico ainda em string em valor númerico tipo float64:
dados_clientes['Valor da compra'] = dados_clientes['Valor da compra'].astype(np.float64)

## Checando se a conversão foi bem sucedida:
dados_clientes.info()

dados_clientes.head()